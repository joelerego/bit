import { join } from 'path';
import { Compiler, TranspileOutput, TranspileOpts } from '@teambit/compiler';
import { BuiltTaskResult, BuildContext } from '@teambit/builder';
import { compileSync } from '@teambit/modules.mdx-compiler';

export class MDXCompiler implements Compiler {
  displayName = 'MDX';

  distDir = 'dist';

  constructor(readonly id: string, readonly config: any) {}

  displayConfig() {
    return JSON.stringify(this.config, null, 2);
  }

  transpileFile(fileContent: string, options: TranspileOpts): TranspileOutput {
    const output = compileSync(fileContent, {
      filepath: options.filePath,
    });

    return [
      {
        outputText: output.contents,
        outputPath: this.getDistPathBySrcPath(options.filePath),
      },
    ];
  }

  /**
   * compile components inside isolated capsules. this being used during tag for the release.
   * meaning, the final package of the component has the dists generated by this method.
   */
  async build(context: BuildContext): Promise<BuiltTaskResult> {
    const capsules = context.capsuleNetwork.seedersCapsules;
    const;
  }

  /**
   * given a source file, return its parallel in the dists. e.g. "index.ts" => "dist/index.js"
   * both, the return path and the given path are relative paths.
   */
  getDistPathBySrcPath(srcPath: string): string {
    return join(srcPath.replace('.mdx', '.js'));
  }

  /**
   * only supported files matching get compiled. others, are copied to the dist dir.
   */
  isFileSupported(filePath: string): boolean {
    return filePath.endsWith('.mdx') || filePath.endsWith('.md');
  }

  /**
   * returns the version of the current compiler instance (e.g. '4.0.1').
   */
  version(): string {
    return '';
  }
}
